<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- mapper为映射的根节点，namespace指定Dao接口的完整类名
mybatis会依据这个接口动态创建一个实现类去实现这个接口，
而这个实现类是一个Mapper对象-->
<mapper namespace="com.example.demo.Base.User">
    <!--id ="接口中的方法名"
　　parameterType="传入的参数类型"
　　resultType = "返回实体类对象，使用包.类名"-->
    <select id="selectUser" parameterType="int" resultType="com.example.demo.Base.User"> select * from tb_user_userinfo where UserId = #{id}</select>
    <select id="selectUsers" parameterType="String" resultType="com.example.demo.Base.User">
    select * from tb_user_userinfo
     </select>
    <update id="updateUser" parameterType="com.example.demo.Base.User"> update tb_user_userinfo
    <trim prefix="set" suffixOverrides=",">
        <if test="UserName!=null">UserName=#{UserName},</if>
        <if test="Phone!=null">Phone=#{Phone},</if>
    </trim>
    WHERE UserId=#{UserId}
    </update>
    <insert id="insertUser" parameterType="com.example.demo.Base.User" useGeneratedKeys="true" keyColumn="UserId" keyProperty="UserId">
        insert into tb_user_userinfo(UserId,UserName,Phone,Password)
        values (#{UserId},#{UserName},#{Phone},'123456')
    </insert>
    <delete id="deleteUser" parameterType="int">
        delete from tb_user_userinfo where UserId = #{id}
    </delete>
</mapper>